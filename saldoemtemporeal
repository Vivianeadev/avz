<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Minha Carteira - Pre√ßos em Tempo Real</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <style>
    body{font-family:Arial,sans-serif;background:#0a0a0a;color:#fff;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:flex-start;padding-top:80px;text-align:center}
    h1{color:#d4af37;margin-bottom:20px}
    .wallet-input{padding:10px;border-radius:8px;border:none;width:320px;margin-bottom:10px;color:#000}
    .key-btn{background:linear-gradient(135deg,#e8b4b8,#d4af37);color:#000;font-weight:bold;padding:10px 20px;border:none;border-radius:8px;cursor:pointer;transition:all 0.3s}
    .key-btn:hover{transform:scale(1.05)}
    #walletInfo{display:none;margin-top:20px;width:100%;max-width:1200px;background:rgba(0,0,0,.6);padding:20px;border-radius:8px;text-align:left}
    #walletInfo p{margin-bottom:8px}
    #errorMessage{color:#ff6b6b;margin-top:10px;text-align:center}
    table{width:100%;border-collapse:collapse;margin-top:15px}
    th,td{padding:12px;border-bottom:1px solid rgba(255,255,255,.08);text-align:left;vertical-align:top}
    th{color:#d4af37;font-weight:bold}
    .muted{opacity:.7;font-size:0.9em}
    .right{text-align:right}
    .chip{font-size:.85rem;padding:4px 8px;border-radius:8px;background:#1b1b1b;display:inline-block;margin:2px}
    .total{font-weight:700;color:#d4af37;font-size:1.1em}
    hr{border:0;border-top:1px solid rgba(255,255,255,.1);margin:6px 0}
    .loading{color:#d4af37;font-style:italic}
    .success{color:#4caf50}
    .error{color:#ff6b6b}
    .status-box{background:#1a1a1a;padding:15px;border-radius:8px;margin:15px 0;border-left:4px solid #d4af37}
    .price-card{background:#1a1a1a;padding:10px;border-radius:5px;margin:5px 0;border-left:3px solid #4caf50}
    .refresh-btn{background:#333;color:#fff;border:none;padding:5px 10px;border-radius:4px;cursor:pointer;margin-left:10px;font-size:0.8em}
    .refresh-btn:hover{background:#555}
    .kyber-badge{background:#31cb9e;color:#000;padding:2px 6px;border-radius:3px;font-size:0.7em;font-weight:bold}
    .coingecko-badge{background:#8dc647;color:#000;padding:2px 6px;border-radius:3px;font-size:0.7em;font-weight:bold}
  </style>
</head>
<body>
  <h1>üè¶ Minha Carteira Crypto</h1>
  <p>Consulte seu saldo e pre√ßos de tokens em tempo real</p>

  <input type="text" id="walletAddressInput" class="wallet-input" placeholder="Cole seu endere√ßo da carteira (0x...)">
  <br><br>
  <button id="checkBalanceBtn" class="key-btn">üîç Consultar Carteira</button>

  <div id="walletInfo">
    <div class="status-box">
      <p><strong>üìç Endere√ßo:</strong> <span id="walletAddress"></span></p>
      <p><strong>üí∞ Saldo MATIC:</strong> <span id="ethBalance"></span></p>
    </div>

    <div class="status-box">
      <p><strong>üìä Status da Consulta:</strong> <button class="refresh-btn" onclick="refreshPrices()">üîÑ Atualizar Pre√ßos</button></p>
      <div id="statusLog"></div>
    </div>

    <div id="tokenSection">
      <table id="tokenTable">
        <thead>
          <tr>
            <th>ü™ô Token</th>
            <th>üíº Saldo</th>
            <th>üíµ Pre√ßo (USD)</th>
            <th>üáßüá∑ Pre√ßo (BRL)</th>
            <th class="right">üí∞ Valor (USD)</th>
            <th class="right">üáßüá∑ Valor (BRL)</th>
            <th>üìà Status</th>
          </tr>
        </thead>
        <tbody id="tokenTbody"></tbody>
        <tfoot>
          <tr style="border-top:2px solid #d4af37">
            <td colspan="4" class="right total">üíé TOTAL GERAL</td>
            <td class="right total" id="totalUsd">‚Äî</td>
            <td class="right total" id="totalBrl">‚Äî</td>
            <td></td>
          </tr>
        </tfoot>
      </table>
    </div>

    <div class="status-box">
      <p><strong>üìà Pre√ßos de Refer√™ncia do Mercado:</strong></p>
      <div id="referenceData">
        <div class="price-card">
          <strong>Bitcoin (BTC):</strong> <span id="btcPrice">Carregando...</span>
        </div>
        <div class="price-card">
          <strong>Ethereum (ETH):</strong> <span id="ethPrice">Carregando...</span>
        </div>
        <div class="price-card">
          <strong>Polygon (MATIC):</strong> <span id="maticPrice">Carregando...</span>
        </div>
        <div class="price-card">
          <strong>Taxa USD/BRL:</strong> <span id="usdBrlRate">R$ 5,50</span>
        </div>
      </div>
    </div>

    <p id="errorMessage"></p>
  </div>

  <script>
    const networks = {
      polygon: { 
        name: "Polygon (MATIC)", 
        nativeSymbol: "MATIC", 
        rpc: "https://polygon-rpc.com/",
        chainId: 137
      }
    };

    // Tokens cadastrados
    const tokens = [
      { 
        name: "AVZ Token", 
        symbol: "AVZ", 
        contract: "0xcE20F7cb738aA5Cf32441B2ba0EFBA1E6f42c0b4", 
        decimals: 18
      },
      { 
        name: "AV9 Token", 
        symbol: "AV9", 
        contract: "0x2EfADD20B18E551d97994790D217915e56005b4f", 
        decimals: 18
      }
    ];

    let exchangeRate = 5.5;
    let currentAddress = null;

    function addStatusLog(message, type = 'info') {
      const statusLog = document.getElementById('statusLog');
      const timestamp = new Date().toLocaleTimeString('pt-BR');
      const icon = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : '‚è≥';
      const colorClass = type === 'error' ? 'error' : type === 'success' ? 'success' : 'loading';
      statusLog.innerHTML += `<div class="${colorClass}">${icon} [${timestamp}] ${message}</div>`;
      statusLog.scrollTop = statusLog.scrollHeight;
    }

    // Fun√ß√£o para buscar taxa de c√¢mbio usando API p√∫blica
    async function getExchangeRate() {
      try {
        addStatusLog('Buscando taxa de c√¢mbio USD/BRL...');
        
        const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
        const data = await response.json();
        
        if (data.rates && data.rates.BRL) {
          exchangeRate = data.rates.BRL;
          document.getElementById('usdBrlRate').textContent = `R$ ${exchangeRate.toFixed(4)}`;
          addStatusLog(`Taxa USD/BRL atualizada: R$ ${exchangeRate.toFixed(4)}`, 'success');
          return exchangeRate;
        }
        throw new Error('Taxa n√£o encontrada');
      } catch (e) {
        addStatusLog('Usando taxa padr√£o USD/BRL: R$ 5,50', 'info');
        document.getElementById('usdBrlRate').textContent = 'R$ 5,50 (padr√£o)';
        return 5.5;
      }
    }

    // Fun√ß√£o para buscar pre√ßos usando CoinGecko
    async function getCryptoPrices() {
      try {
        addStatusLog('Buscando pre√ßos de refer√™ncia...');
        
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,matic-network&vs_currencies=usd&include_24hr_change=true');
        const data = await response.json();
        
        if (data.bitcoin) {
          const btc = data.bitcoin;
          const eth = data.ethereum;
          const matic = data['matic-network'];
          
          document.getElementById('btcPrice').innerHTML = `$${btc.usd.toLocaleString()} ${formatChange(btc.usd_24h_change)}`;
          document.getElementById('ethPrice').innerHTML = `$${eth.usd.toLocaleString()} ${formatChange(eth.usd_24h_change)}`;
          document.getElementById('maticPrice').innerHTML = `$${matic.usd.toFixed(4)} ${formatChange(matic.usd_24h_change)}`;
          
          addStatusLog('Pre√ßos de refer√™ncia atualizados!', 'success');
          return data;
        }
        throw new Error('Dados n√£o encontrados');
      } catch (e) {
        addStatusLog('Erro ao buscar pre√ßos de refer√™ncia', 'error');
        return {};
      }
    }

    // Fun√ß√£o para buscar pre√ßo via KyberSwap API
    async function getKyberSwapPrice(tokenAddress, tokenSymbol) {
      try {
        addStatusLog(`Buscando pre√ßo ${tokenSymbol} via KyberSwap...`);
        
        // USDC na Polygon como token de refer√™ncia
        const usdcAddress = '0x2791bca1f2de4661ed88a30c99a7a9449aa84174';
        const amountIn = '1000000000000000000'; // 1 token
        
        const response = await fetch(
          `https://aggregator-api.kyberswap.com/polygon/api/v1/routes?tokenIn=${tokenAddress}&tokenOut=${usdcAddress}&amountIn=${amountIn}`,
          {
            headers: {
              'x-client-id': 'MeuAppCarteira'
            }
          }
        );
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.code === 0 && data.data && data.data.routeSummary) {
          const amountOut = parseFloat(data.data.routeSummary.amountOut);
          const priceUsd = amountOut / 1000000; // USDC tem 6 decimais
          
          addStatusLog(`Pre√ßo ${tokenSymbol} encontrado via KyberSwap: $${priceUsd.toFixed(6)}`, 'success');
          
          return {
            priceUsd: priceUsd,
            change24h: 0, // KyberSwap n√£o retorna mudan√ßa 24h
            source: 'KyberSwap'
          };
        }
        
        throw new Error('Rota n√£o encontrada');
      } catch (e) {
        addStatusLog(`Erro KyberSwap ${tokenSymbol}: ${e.message}`, 'error');
        return null;
      }
    }

    // Fun√ß√£o para buscar pre√ßo de token (tenta CoinGecko primeiro, depois KyberSwap)
    async function getTokenPrice(contractAddress, tokenSymbol) {
      try {
        // Primeiro tenta CoinGecko
        addStatusLog(`Buscando pre√ßo ${tokenSymbol} via CoinGecko...`);
        
        const response = await fetch(`https://api.coingecko.com/api/v3/simple/token_price/polygon-pos?contract_addresses=${contractAddress}&vs_currencies=usd&include_24hr_change=true`);
        const data = await response.json();
        
        const tokenData = data[contractAddress.toLowerCase()];
        if (tokenData && tokenData.usd) {
          addStatusLog(`Pre√ßo ${tokenSymbol} encontrado via CoinGecko: $${tokenData.usd}`, 'success');
          return {
            priceUsd: tokenData.usd,
            change24h: tokenData.usd_24h_change || 0,
            source: 'CoinGecko'
          };
        }
        
        // Se n√£o encontrou no CoinGecko, tenta KyberSwap
        addStatusLog(`${tokenSymbol} n√£o encontrado no CoinGecko, tentando KyberSwap...`);
        return await getKyberSwapPrice(contractAddress, tokenSymbol);
        
      } catch (e) {
        addStatusLog(`Erro ao buscar pre√ßo ${tokenSymbol}: ${e.message}`, 'error');
        // Tenta KyberSwap como fallback
        return await getKyberSwapPrice(contractAddress, tokenSymbol);
      }
    }

    function fmt(n, decimals = 4) {
      if (n === null || n === undefined || isNaN(n)) return "‚Äî";
      const num = Number(n);
      return num.toLocaleString("pt-BR", { 
        minimumFractionDigits: decimals, 
        maximumFractionDigits: decimals 
      });
    }

    function formatChange(change) {
      if (!change || isNaN(change)) return "";
      const sign = change >= 0 ? "+" : "";
      const color = change >= 0 ? "#4caf50" : "#ff6b6b";
      const arrow = change >= 0 ? "üìà" : "üìâ";
      return `<span style="color: ${color}">${arrow} ${sign}${change.toFixed(2)}%</span>`;
    }

    async function consultarSaldo() {
      const address = document.getElementById("walletAddressInput").value.trim();
      const walletInfoDiv = document.getElementById("walletInfo");
      const errorMessageP = document.getElementById("errorMessage");
      const tbody = document.getElementById("tokenTbody");
      const totalUsdEl = document.getElementById("totalUsd");
      const totalBrlEl = document.getElementById("totalBrl");
      const statusLog = document.getElementById("statusLog");

      // Reset
      walletInfoDiv.style.display = "none";
      errorMessageP.textContent = "";
      tbody.innerHTML = "";
      totalUsdEl.textContent = "‚Äî";
      totalBrlEl.textContent = "‚Äî";
      statusLog.innerHTML = "";

      if (!address) {
        errorMessageP.textContent = "Por favor, insira um endere√ßo de carteira.";
        return;
      }

      if (!ethers.utils.isAddress(address)) {
        errorMessageP.textContent = "Endere√ßo de carteira inv√°lido. Verifique o formato.";
        return;
      }

      currentAddress = address;
      addStatusLog('üöÄ Iniciando consulta da carteira...', 'info');
      document.getElementById("walletAddress").textContent = address;
      document.getElementById("ethBalance").textContent = "Carregando...";
      walletInfoDiv.style.display = "block";

      try {
        // Conecta √† rede Polygon
        addStatusLog('üîó Conectando √† rede Polygon...');
        const provider = new ethers.providers.JsonRpcProvider(networks.polygon.rpc);
        
        // Busca saldo MATIC
        addStatusLog('üí∞ Consultando saldo MATIC...');
        const balance = await provider.getBalance(address);
        const formattedBalance = parseFloat(ethers.utils.formatEther(balance));
        document.getElementById("ethBalance").textContent = `${fmt(formattedBalance, 4)} MATIC`;
        addStatusLog(`Saldo MATIC: ${fmt(formattedBalance, 4)}`, 'success');

        // Busca taxa de c√¢mbio e pre√ßos de refer√™ncia
        await Promise.all([
          getExchangeRate(),
          getCryptoPrices()
        ]);

        let totalUsd = 0, totalBrl = 0;

        // Processa cada token
        for (const token of tokens) {
          addStatusLog(`üîç Processando ${token.symbol}...`);
          
          const tr = document.createElement("tr");
          tr.innerHTML = `
            <td><strong>${token.symbol}</strong><br><span class="muted">${token.name}</span></td>
            <td class="loading">‚è≥ Carregando...</td>
            <td class="loading">‚è≥ Carregando...</td>
            <td class="loading">‚è≥ Carregando...</td>
            <td class="right loading">‚è≥ Carregando...</td>
            <td class="right loading">‚è≥ Carregando...</td>
            <td class="loading">üîç Consultando...</td>
          `;
          tbody.appendChild(tr);

          try {
            // Busca saldo do token
            const contract = new ethers.Contract(
              token.contract,
              ["function balanceOf(address) view returns (uint256)"],
              provider
            );
            
            const raw = await contract.balanceOf(address);
            const bal = Number(ethers.utils.formatUnits(raw, token.decimals));
            addStatusLog(`Saldo ${token.symbol}: ${fmt(bal, 4)}`, 'success');

            // Busca pre√ßo do token
            const priceData = await getTokenPrice(token.contract, token.symbol);
            
            let statusText = "";
            let valueUsd = null;
            let valueBrl = null;
            let priceUsd = null;
            let priceBrl = null;

            if (priceData && priceData.priceUsd) {
              priceUsd = priceData.priceUsd;
              priceBrl = priceUsd * exchangeRate;
              valueUsd = bal * priceUsd;
              valueBrl = valueUsd * exchangeRate;
              
              totalUsd += valueUsd;
              totalBrl += valueBrl;
              
              const changeText = formatChange(priceData.change24h);
              const sourceBadge = priceData.source === 'KyberSwap' ? 
                '<span class="kyber-badge">KYBER</span>' : 
                '<span class="coingecko-badge">GECKO</span>';
              statusText = `<span class="success">‚úÖ ${sourceBadge}</span><br>${changeText}`;
            } else {
              statusText = `<span class="error">‚ùå Pre√ßo n√£o encontrado</span><br><small class="muted">Token n√£o listado</small>`;
            }

            // Atualiza a linha
            tr.innerHTML = `
              <td><strong>${token.symbol}</strong><br><span class="muted">${token.name}</span></td>
              <td>${fmt(bal, 4)}</td>
              <td>$${fmt(priceUsd, 6)}</td>
              <td>R$ ${fmt(priceBrl, 6)}</td>
              <td class="right">$${fmt(valueUsd, 2)}</td>
              <td class="right">R$ ${fmt(valueBrl, 2)}</td>
              <td>${statusText}</td>
            `;

          } catch (tokenError) {
            addStatusLog(`‚ùå Erro ao processar ${token.symbol}: ${tokenError.message}`, 'error');
            tr.innerHTML = `
              <td><strong>${token.symbol}</strong><br><span class="muted">${token.name}</span></td>
              <td class="error">Erro</td>
              <td class="error">‚Äî</td>
              <td class="error">‚Äî</td>
              <td class="right error">‚Äî</td>
              <td class="right error">‚Äî</td>
              <td><span class="error">‚ùå Erro na consulta</span></td>
            `;
          }
        }

        totalUsdEl.textContent = `$${fmt(totalUsd, 2)}`;
        totalBrlEl.textContent = `R$ ${fmt(totalBrl, 2)}`;

        addStatusLog('üéâ Consulta conclu√≠da com sucesso!', 'success');

      } catch (err) {
        addStatusLog(`‚ùå Erro geral: ${err.message}`, 'error');
        errorMessageP.textContent = "Erro ao consultar dados. Verifique sua conex√£o e tente novamente.";
      }
    }

    async function refreshPrices() {
      if (currentAddress) {
        addStatusLog('üîÑ Atualizando pre√ßos...', 'info');
        await Promise.all([
          getExchangeRate(),
          getCryptoPrices()
        ]);
        addStatusLog('‚úÖ Pre√ßos atualizados!', 'success');
      }
    }

    // Event listeners
    document.getElementById("checkBalanceBtn").addEventListener("click", consultarSaldo);
    
    document.getElementById("walletAddressInput").addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        consultarSaldo();
      }
    });

    // Inicializa√ß√£o
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üíé Sistema de Carteira Crypto carregado!');
      
      // Carrega pre√ßos de refer√™ncia na inicializa√ß√£o
      getCryptoPrices();
      getExchangeRate();
    });

    // Auto-refresh a cada 2 minutos
    setInterval(() => {
      if (currentAddress) {
        refreshPrices();
      }
    }, 120000);
  </script>
</body>
</html>

