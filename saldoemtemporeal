<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Minha Carteira - Completa (MetaMask, Gr√°ficos, Exporta√ß√£o)</title>

  <!-- Ethers.js -->
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

  <style>
    :root{
      --gold:#d4af37;
      --rose:#e8b4b8;
      --bg:#0a0a0a;
      --panel:#141414;
      --muted: rgba(255,255,255,0.7);
      --ok:#4caf50;
      --bad:#ff6b6b;
    }
    *{box-sizing:border-box}
    html,body{margin:0;padding:0}
    body{
      font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
      background: var(--bg);
      color:#fff;
      min-height:100vh;
      display:flex;
      flex-direction:column;
    }
    header{
      position:sticky; top:0; z-index:10;
      background: rgba(10,10,10,0.8);
      backdrop-filter: blur(6px);
      border-bottom:1px solid rgba(255,255,255,0.06);
    }
    .container{width:100%;max-width:1200px;margin:0 auto;padding:16px}
    .row{display:flex; gap:12px; flex-wrap:wrap; align-items:center}
    h1{font-family: "Playfair Display", Georgia, serif; color:var(--gold); margin:0 0 6px}
    .tag{font-size:.85rem; color:var(--muted)}
    .btn{
      border:none; cursor:pointer; padding:10px 14px; border-radius:10px;
      background: linear-gradient(135deg, var(--rose), var(--gold));
      color:#000; font-weight:700; transition: transform .15s ease;
      box-shadow:0 8px 26px rgba(232,180,184,0.35); /* sombra em rose */
    }
    .btn:hover{ transform: translateY(-1px) scale(1.01) }
    .btn-secondary{
      background:#1f1f1f; color:#fff; font-weight:600;
      border:1px solid rgba(255,255,255,0.08);
      box-shadow:0 8px 26px rgba(232,180,184,0.15); /* rose leve */
    }
    .select, .input{
      background:#121212; color:#fff; border:1px solid rgba(255,255,255,0.08);
      border-radius:10px; padding:10px 12px; min-width:200px;
      box-shadow:0 8px 26px rgba(232,180,184,0.15); /* rose leve */
    }
    main{padding:20px 0; flex:1}
    .grid{display:grid; gap:16px}
    @media(min-width:900px){ .grid{ grid-template-columns: 2fr 1fr } }
    .panel{
      background:var(--panel);
      border-radius:16px;
      padding:16px;
      border:1px solid rgba(255,255,255,0.06);
      box-shadow:0 16px 50px rgba(232,180,184,0.25); /* sombra em rose forte */
    }
    .panel h2{margin:0 0 6px; color:var(--gold); font-size:1.1rem}
    .muted{ color: var(--muted) }
    .status-log{height:180px; overflow:auto; background:#0f0f0f; border-radius:12px; padding:10px; font-size:.92rem}
    .status-log .line{margin-bottom:6px}
    .ok{color:var(--ok)} .bad{color:var(--bad)} .load{color:var(--gold); font-style:italic}
    .tokens{
      display:grid; grid-template-columns:1fr; gap:12px;
    }
    @media(min-width:700px){ .tokens{ grid-template-columns:1fr 1fr } }
    .token-card{
      background:#101010; padding:14px; border-radius:14px;
      border:1px solid rgba(255,255,255,0.06);
      display:grid; grid-template-columns:1fr auto; gap:6px; align-items:center;
      box-shadow:0 10px 32px rgba(232,180,184,0.22); /* rose */
    }
    .token-card .symbol{font-size:1.05rem; font-weight:800}
    .badge{display:inline-block; padding:2px 8px; border-radius:999px; font-size:.72rem; font-weight:700}
    .badge-kyber{background:#31cb9e;color:#000}
    .badge-gecko{background:#8dc647;color:#000}
    .row-end{display:flex; gap:8px; align-items:center; justify-content:flex-end}
    table{width:100%; border-collapse:collapse; font-size:.95rem}
    th,td{ padding:8px 10px; border-bottom:1px solid rgba(255,255,255,0.06) }
    th{ color:var(--gold); text-align:left }
    tfoot td{ font-weight:800; color:var(--gold) }
    .right{text-align:right}
    .flex{display:flex; gap:10px; align-items:center; flex-wrap:wrap}
    .actions{display:flex; gap:10px; flex-wrap:wrap}
    canvas{background:#0f0f0f; border-radius:12px; padding:8px}
    .alert{ background:#1a1a1a; border-left:4px solid var(--bad); padding:10px; border-radius:10px; margin:8px 0 }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <div class="row">
        <div style="flex:1 1 auto">
          <h1>üè¶ Minha Carteira Crypto</h1>
          <div class="tag">Consultas, pre√ßos em tempo real, MetaMask, exporta√ß√£o e gr√°ficos</div>
        </div>
        <div class="actions">
          <button id="connectBtn" class="btn">ü¶ä Conectar MetaMask</button>
          <select id="networkSelect" class="select">
            <option value="polygon" selected>Polygon (MATIC)</option>
          </select>
          <button id="exportCsvBtn" class="btn-secondary">‚¨áÔ∏è Exportar CSV</button>
          <button id="toggleThemeBtn" class="btn-secondary">üåì Tema Escuro/Claro</button>
        </div>
      </div>
      <div class="row" style="margin-top:10px">
        <input id="addressInput" class="input" placeholder="Cole um endere√ßo (0x...) ou conecte a MetaMask" style="flex:1 1 280px" />
        <button id="checkBtn" class="btn">üîç Consultar</button>
      </div>
    </div>
  </header>

  <main class="container grid">
    <section class="panel">
      <h2>üìç Carteira</h2>
      <div class="muted" id="addressView">Desconectado</div>
      <div class="flex" style="margin-top:6px">
        <div><strong>Saldo MATIC:</strong> <span id="maticBalance">‚Äî</span></div>
        <div><strong>USD/BRL:</strong> <span id="usdBrl">‚Äî</span></div>
      </div>

      <div class="alert" id="priceAlert" style="display:none"></div>

      <div class="row" style="margin-top:12px">
        <div style="flex:1 1 auto">
          <h2>üìà Gr√°fico (token selecionado)</h2>
          <canvas id="priceChart" height="140"></canvas>
          <div class="muted" id="chartCaption">O gr√°fico usa snapshots locais coletados a cada atualiza√ß√£o.</div>
        </div>
      </div>
    </section>

    <aside class="panel">
      <h2>üìä Status</h2>
      <div class="status-log" id="log"></div>
      <div class="row" style="margin-top:10px">
        <button id="refreshBtn" class="btn-secondary">üîÑ Atualizar pre√ßos</button>
        <button id="clearHistoryBtn" class="btn-secondary">üóëÔ∏è Limpar hist√≥rico</button>
      </div>

      <div style="margin-top:14px">
        <h2>üìå Refer√™ncias de Mercado</h2>
        <div class="flex">
          <div>BTC: <span id="btcRef">‚Äî</span></div>
          <div>ETH: <span id="ethRef">‚Äî</span></div>
          <div>MATIC: <span id="maticRef">‚Äî</span></div>
        </div>
      </div>
    </aside>

    <section class="panel" style="grid-column:1 / -1">
      <h2>ü™ô Tokens</h2>
      <div class="tokens" id="tokenCards"></div>

      <div style="margin-top:14px; overflow:auto">
        <table>
          <thead>
            <tr>
              <th>Token</th>
              <th>Saldo</th>
              <th>Pre√ßo (USD)</th>
              <th>Pre√ßo (BRL)</th>
              <th class="right">Valor (USD)</th>
              <th class="right">Valor (BRL)</th>
              <th>Fonte</th>
            </tr>
          </thead>
          <tbody id="tokenTbody"></tbody>
          <tfoot>
            <tr>
              <td colspan="4" class="right">TOTAL</td>
              <td class="right" id="totalUsd">‚Äî</td>
              <td class="right" id="totalBrl">‚Äî</td>
              <td></td>
            </tr>
          </tfoot>
        </table>
      </div>
    </section>
  </main>

  <script>
    // ======== Config ========
    const networks = {
      polygon: {
        name: "Polygon (MATIC)",
        chainId: 137,
        rpc: "https://polygon-rpc.com/",
        nativeSymbol: "MATIC"
      }
    };

    const TOKENS = [
      { name:"AVZ Token", symbol:"AVZ", contract:"0xcE20F7cb738aA5Cf32441B2ba0EFBA1E6f42c0b4", decimals:18 },
      { name:"AV9 Token", symbol:"AV9", contract:"0x2EfADD20B18E551d97994790D217915e56005b4f", decimals:18 }
    ];

    // ======== State ========
    let provider = null;
    let signer = null;
    let currentAddress = null;
    let exchangeRate = 5.5;
    let snapshots = JSON.parse(localStorage.getItem("avz_snapshots")||"{}"); // {symbol: [{t, priceUsd, balance, valueUsd}]}
    let chart = null;
    let chartSymbol = "AVZ";

    // ======== Utils ========
    const $ = sel => document.querySelector(sel);
    function log(msg, type="load"){
      const el = document.createElement("div");
      el.className = "line " + (type==="ok"?"ok": type==="bad"?"bad":"load");
      const t = new Date().toLocaleTimeString("pt-BR");
      el.textContent = `[${t}] ${msg}`;
      $("#log").appendChild(el);
      $("#log").scrollTop = $("#log").scrollHeight;
    }
    function fmt(n, dec=4){
      if(n==null || isNaN(n)) return "‚Äî";
      return Number(n).toLocaleString("pt-BR",{minimumFractionDigits:dec, maximumFractionDigits:dec});
    }
    function fmtMoney(n, dec=2){ return (n==null||isNaN(n))?"‚Äî":("$"+fmt(n,dec)); }
    function fmtBRL(n, dec=2){ return (n==null||isNaN(n))?"‚Äî":("R$ "+fmt(n,dec)); }
    function changeTag(x){
      if(x==null || isNaN(x)) return "";
      const good = x>=0; const arrow = good?"üìà":"+üìâ".replace("+","");
      const color = good?"var(--ok)":"var(--bad)";
      return `<span style="color:${color}">${good? "üìà":"+üìâ"} ${x>0?"+":""}${x.toFixed(2)}%</span>`;
    }
    function saveSnapshots(){ localStorage.setItem("avz_snapshots", JSON.stringify(snapshots)); }
    function pushSnapshot(symbol, obj){
      snapshots[symbol] = snapshots[symbol]||[];
      snapshots[symbol].push({t:Date.now(), ...obj});
      if(snapshots[symbol].length>200) snapshots[symbol].shift();
      saveSnapshots();
    }

    // ======== Theme ========
    let light=false;
    $("#toggleThemeBtn").addEventListener("click", ()=>{
      light=!light;
      document.body.style.background = light?"#f8f8f8":"var(--bg)";
      document.body.style.color = light?"#111":"#fff";
    });

    // ======== Provider Helpers ========
    function getFallbackProvider(){ return new ethers.providers.JsonRpcProvider(networks.polygon.rpc); }

    async function ensurePolygon(){
      if(!window.ethereum) return;
      const chainIdHex = "0x"+networks.polygon.chainId.toString(16);
      try{
        await window.ethereum.request({ method:"wallet_switchEthereumChain", params:[{chainId: chainIdHex}]});
      }catch(e){
        if(e.code===4902){ // not added
          await window.ethereum.request({ method:"wallet_addEthereumChain", params:[{
            chainId: chainIdHex,
            chainName: networks.polygon.name,
            nativeCurrency:{ name:"MATIC", symbol:"MATIC", decimals:18 },
            rpcUrls:[networks.polygon.rpc],
            blockExplorerUrls:["https://polygonscan.com"]
          }]});
        }else{
          log("N√£o foi poss√≠vel mudar para Polygon: "+e.message, "bad");
        }
      }
    }

    // ======== MetaMask ========
    $("#connectBtn").addEventListener("click", async ()=>{
      try{
        if(!window.ethereum){ alert("MetaMask n√£o encontrada."); return; }
        await ensurePolygon();
        const accts = await window.ethereum.request({ method:"eth_requestAccounts" });
        provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        currentAddress = accts[0];
        $("#addressView").textContent = currentAddress;
        $("#addressInput").value = currentAddress;
        log("Carteira conectada via MetaMask.", "ok");
        await consultar();
      }catch(e){ log("Erro ao conectar MetaMask: "+e.message, "bad"); }
    });

    // ======== Market refs & FX ========
    async function getExchangeRate(){
      try{
        const r = await fetch("https://api.exchangerate-api.com/v4/latest/USD");
        const j = await r.json();
        if(j.rates && j.rates.BRL){
          exchangeRate = j.rates.BRL;
          $("#usdBrl").textContent = "R$ "+exchangeRate.toFixed(4);
          log("USD/BRL atualizado.", "ok");
        }
      }catch{ log("Falha ao buscar USD/BRL. Usando 5.50.", "bad"); exchangeRate=5.5; $("#usdBrl").textContent="R$ 5.5000"; }
      return exchangeRate;
    }
    async function getMarketRefs(){
      try{
        const r = await fetch("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,matic-network&vs_currencies=usd&include_24hr_change=true");
        const d = await r.json();
        const btc=d.bitcoin||{}, eth=d.ethereum||{}, matic=d["matic-network"]||{};
        $("#btcRef").innerHTML = "$"+(btc.usd? btc.usd.toLocaleString():"‚Äî")+" "+changeTag(btc.usd_24h_change||0);
        $("#ethRef").innerHTML = "$"+(eth.usd? eth.usd.toLocaleString():"‚Äî")+" "+changeTag(eth.usd_24h_change||0);
        $("#maticRef").innerHTML = "$"+(matic.usd? matic.usd.toFixed(4):"‚Äî")+" "+changeTag(matic.usd_24h_change||0);
      }catch(e){ log("Falha ao buscar refer√™ncias de mercado: "+e.message, "bad"); }
    }

    // ======== Token price (Coingecko -> Kyber) ========
    async function getKyberPrice(addr, symbol){
      try{
        log("KyberSwap "+symbol+"...", "load");
        const usdc = "0x2791bca1f2de4661ed88a30c99a7a9449aa84174";
        const amountIn = "1000000000000000000"; // 1.0 token
        const url = `https://aggregator-api.kyberswap.com/polygon/api/v1/routes?tokenIn=${addr}&tokenOut=${usdc}&amountIn=${amountIn}`;
        const r = await fetch(url, { headers:{ "x-client-id":"MinhaCarteiraAVZ" }});
        const j = await r.json();
        if(j.code===0 && j.data && j.data.routeSummary){
          // amountOut √© inteiro em USDC (6 decimais)
          const amountOut = parseFloat(j.data.routeSummary.amountOut);
          const priceUsd = amountOut / 1e6;
          return { priceUsd, change24h:null, source:"KYBER" };
        }
      }catch(e){ log("Kyber err: "+e.message, "bad"); }
      return null;
    }
    async function getTokenPrice(addr, symbol){
      try{
        const url = `https://api.coingecko.com/api/v3/simple/token_price/polygon-pos?contract_addresses=${addr}&vs_currencies=usd&include_24hr_change=true`;
        const r = await fetch(url);
        const j = await r.json();
        const key = addr.toLowerCase();
        if(j[key] && j[key].usd!=null){
          return { priceUsd:j[key].usd, change24h:j[key].usd_24h_change||0, source:"GECKO" };
        }
        log(symbol+" n√£o listado no CoinGecko. Tentando Kyber...", "load");
        return await getKyberPrice(addr, symbol);
      }catch(e){
        log("Falha CoinGecko "+symbol+": "+e.message, "bad");
        return await getKyberPrice(addr, symbol);
      }
    }

    // ======== Chart ========
    function ensureChart(){
      const ctx = document.getElementById("priceChart");
      if(chart) return chart;
      chart = new Chart(ctx, {
        type:"line",
        data:{ labels:[], datasets:[{ label:"Pre√ßo USD", data:[], tension:.25 }]},
        options:{
          responsive:true,
          plugins:{ legend:{ display:false } },
          scales:{ x:{ ticks:{ color:"#aaa" }}, y:{ ticks:{ color:"#aaa" }}}
        }
      });
      return chart;
    }
    function updateChart(symbol){
      chartSymbol = symbol;
      const arr = (snapshots[symbol]||[]).slice(-60);
      const labels = arr.map(x=> new Date(x.t).toLocaleTimeString("pt-BR"));
      const data = arr.map(x=> x.priceUsd);
      const c = ensureChart();
      c.data.labels = labels;
      c.data.datasets[0].data = data;
      c.update();
      document.getElementById("chartCaption").textContent = `Mostrando ${arr.length} pontos de ${symbol}.`;
    }

    // ======== Alerts ========
    function maybeAlert(symbol, change24h){
      const box = $("#priceAlert");
      if(change24h==null || isNaN(change24h)){ box.style.display="none"; return; }
      if(Math.abs(change24h)>=5){
        box.style.display="block";
        const dir = change24h>0 ? "alta" : "queda";
        box.innerHTML = `‚ö†Ô∏è Alerta: ${symbol} com ${dir} de ${change24h.toFixed(2)}% nas √∫ltimas 24h.`;
      }else{
        box.style.display="none";
      }
    }

    // ======== Balance ========
    async function getMaticBalance(addr){
      try{
        const p = provider || getFallbackProvider();
        const bal = await p.getBalance(addr);
        return Number(ethers.utils.formatEther(bal));
      }catch{ return null; }
    }
    async function getErc20Balance(addr, token){
      const p = provider || getFallbackProvider();
      const abi = ["function balanceOf(address) view returns (uint256)"];
      const c = new ethers.Contract(token.contract, abi, p);
      const raw = await c.balanceOf(addr);
      return Number(ethers.utils.formatUnits(raw, token.decimals));
    }

    // ======== Render ========
    function renderRows(rows){
      const tbody = $("#tokenTbody");
      tbody.innerHTML = "";
      let totalUsd=0, totalBrl=0;
      for(const r of rows){
        totalUsd += (r.valueUsd||0);
        totalBrl += (r.valueUsd||0)*exchangeRate;
        const src = r.source==="KYBER" ? '<span class="badge badge-kyber">KYBER</span>' : '<span class="badge badge-gecko">GECKO</span>';
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td><strong>${r.symbol}</strong><div class="muted">${r.name}</div></td>
          <td>${fmt(r.balance,4)}</td>
          <td>${fmtMoney(r.priceUsd,6)} ${changeTag(r.change24h)}</td>
          <td>${fmtBRL(r.priceUsd*exchangeRate,6)}</td>
          <td class="right">${fmtMoney(r.valueUsd,2)}</td>
          <td class="right">${fmtBRL(r.valueUsd*exchangeRate,2)}</td>
          <td>${src}</td>`;
        tbody.appendChild(tr);
      }
      $("#totalUsd").textContent = fmtMoney(totalUsd,2);
      $("#totalBrl").textContent = fmtBRL(totalBrl,2);
    }
    function renderCards(rows){
      const root = $("#tokenCards");
      root.innerHTML = "";
      for(const r of rows){
        const src = r.source==="KYBER" ? '<span class="badge badge-kyber">KYBER</span>' : '<span class="badge badge-gecko">GECKO</span>';
        const card = document.createElement("div");
        card.className = "token-card";
        card.innerHTML = `
          <div>
            <div class="symbol">${r.symbol} ${src}</div>
            <div class="muted">${r.name}</div>
            <div style="margin-top:6px">
              <strong>Saldo:</strong> ${fmt(r.balance,4)} ‚Äî <strong>Pre√ßo:</strong> ${fmtMoney(r.priceUsd,6)} ${changeTag(r.change24h)}
            </div>
            <div class="muted">Valor: ${fmtMoney(r.valueUsd,2)} ‚Ä¢ ${fmtBRL(r.valueUsd*exchangeRate,2)}</div>
          </div>
          <div class="row-end">
            <button class="btn-secondary" onclick="updateChart('${r.symbol}')">üìà Ver gr√°fico</button>
          </div>`;
        root.appendChild(card);
      }
    }

    // ======== Export ========
    function exportCSV(rows){
      const header = ["timestamp","address","symbol","name","balance","priceUsd","valueUsd","priceBrl","valueBrl"].join(",");
      const t = new Date().toISOString();
      const lines = [header];
      for(const r of rows){
        const priceBrl = (r.priceUsd||0)*exchangeRate;
        const valueBrl = (r.valueUsd||0)*exchangeRate;
        lines.push([t,currentAddress||"",r.symbol,r.name,(r.balance||0),(r.priceUsd||0),(r.valueUsd||0),priceBrl,valueBrl].join(","));
      }
      const blob = new Blob([lines.join("\n")], {type:"text/csv;charset=utf-8;"});
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "carteira-avz.csv";
      a.click();
      URL.revokeObjectURL(url);
    }

    // ======== Main flow ========
    async function consultar(){
      const addr = $("#addressInput").value.trim();
      if(!addr || !ethers.utils.isAddress(addr)){ alert("Informe um endere√ßo v√°lido (0x...)"); return; }
      currentAddress = addr;
      $("#addressView").textContent = addr;
      $("#maticBalance").textContent = "Carregando...";

      log("Conectando √† Polygon...", "load");
      const p = provider || getFallbackProvider();

      // FX + refs
      await Promise.all([ getExchangeRate(), getMarketRefs() ]);

      // native balance
      const matic = await getMaticBalance(addr);
      $("#maticBalance").textContent = matic!=null ? `${fmt(matic,4)} MATIC` : "‚Äî";

      // tokens
      const rows = [];
      for(const tkn of TOKENS){
        log(`Processando ${tkn.symbol}...`, "load");
        try{
          const bal = await getErc20Balance(addr, tkn);
          const price = await getTokenPrice(tkn.contract, tkn.symbol);
          if(price && price.priceUsd!=null){
            const valueUsd = bal * price.priceUsd;
            const row = {
              symbol:tkn.symbol, name:tkn.name, balance:bal,
              priceUsd:price.priceUsd, change24h:price.change24h,
              source:price.source, valueUsd
            };
            rows.push(row);
            pushSnapshot(tkn.symbol, { priceUsd: price.priceUsd, balance: bal, valueUsd });
            if(tkn.symbol===chartSymbol) updateChart(tkn.symbol);
            maybeAlert(tkn.symbol, price.change24h);
            log(`${tkn.symbol} ok.`, "ok");
          }else{
            rows.push({ symbol:tkn.symbol, name:tkn.name, balance:bal, priceUsd:null, change24h:null, source:"‚Äî", valueUsd:null });
            log(`${tkn.symbol} sem pre√ßo.`, "bad");
          }
        }catch(e){
          log(`Erro ${tkn.symbol}: ${e.message}`, "bad");
          rows.push({ symbol:tkn.symbol, name:tkn.name, balance:null, priceUsd:null, change24h:null, source:"‚Äî", valueUsd:null });
        }
      }

      renderRows(rows);
      renderCards(rows);
      // store last snapshot set
      localStorage.setItem("avz_last_rows", JSON.stringify(rows));
    }

    // ======== UI events ========
    $("#checkBtn").addEventListener("click", consultar);
    $("#addressInput").addEventListener("keypress", e=>{ if(e.key==="Enter") consultar(); });
    $("#exportCsvBtn").addEventListener("click", ()=>{
      const rows = JSON.parse(localStorage.getItem("avz_last_rows")||"[]");
      if(rows.length===0){ alert("Nenhum dado para exportar. Fa√ßa uma consulta primeiro."); return; }
      exportCSV(rows);
    });
    $("#refreshBtn").addEventListener("click", async ()=>{
      if(!currentAddress){ alert("Fa√ßa uma consulta primeiro."); return; }
      await Promise.all([ getExchangeRate(), getMarketRefs() ]);
      await consultar();
      log("Atualiza√ß√£o conclu√≠da.", "ok");
    });
    $("#clearHistoryBtn").addEventListener("click", ()=>{
      snapshots = {}; saveSnapshots();
      localStorage.removeItem("avz_last_rows");
      updateChart(chartSymbol);
      log("Hist√≥rico limpo.", "ok");
    });

    // ======== Init ========
    (async function init(){
      log("Aplica√ß√£o carregada.", "ok");
      await Promise.all([ getExchangeRate(), getMarketRefs() ]);
      // Se havia uma carteira conectada antes
      if(window.ethereum){
        try{
          const accts = await window.ethereum.request({ method:"eth_accounts" });
          if(accts && accts[0]){
            provider = new ethers.providers.Web3Provider(window.ethereum);
            signer = provider.getSigner();
            currentAddress = accts[0];
            $("#addressView").textContent = currentAddress;
            $("#addressInput").value = currentAddress;
            log("Carteira detectada (conecte para autorizar).", "load");
          }
        }catch{}
      }
      updateChart(chartSymbol);
      // Auto-refresh a cada 2 minutos se h√° endere√ßo
      setInterval(async ()=>{
        if(currentAddress){
          await Promise.all([ getExchangeRate(), getMarketRefs() ]);
          await consultar();
        }
      }, 120000);
    })();
  </script>
</body>
</html>
